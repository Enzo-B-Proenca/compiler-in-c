#include "lexer.h"
#include <ctype.h>
#include <stdlib.h>
#include <string.h>

static token_t *list = NULL;
static token_t *head = NULL;

// lexer_push() appends the lexeme to the list and allocates the space for the
// next.
void lexer_push(token_type_t ty, char *lexeme) {
  if (list == NULL){
    list = (token_t *)malloc(sizeof(token_t));
    head = list;
  } else {
    list->next = (token_t *) malloc(sizeof(token_t));
    list = list->next;
  }

  list->ty = ty;
  list->lexeme = lexeme;
  list->next = NULL;
}

// lexer_parser() checks each character in the input and separates the lexemes
// making use of the list
token_t *lexer_parser(char *source) {
  head = list = NULL;

  for (size_t i = 0; i < strlen(source); i++) {
    char current = source[i];

    switch (current) {
    case '+':
      lexer_push(PLUS, "+");
      break;
    case '-':
      lexer_push(MINUS, "-");
      break;
    case '*':
      lexer_push(STAR, "*");
      break;
    case '/':
      lexer_push(SLASH, "/");
      break;
    }

    if (isdigit(current)) {
      char *begin = &source[i];
      size_t len = i;
      i++;
      current = source[i];

      while (isdigit(current)) {
        len++;
        i++;
      }

      char *lexeme = malloc(sizeof(char) * (len + 1));
      strncpy(lexeme, begin, len);
      lexeme[len] = '\0';
      lexer_push(NUMBER, lexeme);
    }
  }

  return head;
}
